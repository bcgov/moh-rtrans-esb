# This is a multi job workflow to deploy a selected release build or feature build in a selected environment
# No approval is required for deploying a feature build.
# Approval is required for deploying a release build to any environment.
# Steps are:
# Job 1:
#   Validates if it is valid input
#   Determine target namespace for the input
#   Determine image tag from the input
#   Login to openshift and Determine image sha from image repository
# Job 2: Feature build deploy
#   Push the image to target repository
#   Update GitOps repo with sha to deploy using ArgoCD autoSync
#
# Job 3: Relase build deploy
#   After deploy request is approved
#   Push the image to target repository
#   Update GitOps repo with sha to deploy using ArgoCD autoSync

name: deploy

env:
  OPENSHIFT_SERVER_GOLD: ${{secrets.OPENSHIFT_SERVER_GOLD}}
  OPENSHIFT_SERVER_GOLDDR: ${{secrets.OPENSHIFT_SERVER_GOLDDR}}
  DEFAULT_NAMESPACE: c8d6f2-tools
  IMAGE_REGISTRY_GOLD: image-registry.apps.gold.devops.gov.bc.ca
  IMAGE_REGISTRY_GOLDDR: image-registry.apps.golddr.devops.gov.bc.ca
  OPENSHIFT_GOLD_TOKEN: ${{secrets.C8D6F2_OPENSHIFT_GITHUB_ACTIONS_SA_GOLD_TOKEN}}
  OPENSHIFT_GOLDDR_TOKEN: ${{secrets.C8D6F2_OPENSHIFT_GITHUB_ACTIONS_SA_GOLDDR_TOKEN}}
  IMAGE_NAME: rtrans-esb
  TARGET_NAMESPACE:
  FEATURE_BUILD_IMAGE_TAG_PREFIX: "featurebuild"
  RELEASE_BUILD_IMAGE_TAG_PREFIX: "release-1.1"
  IMAGE_ID:
  REPLICATE: "false"

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      Environment:
        type: choice
        description: Select an environment to deploy to
        options:
          - dev
          - test
          - sandbox
          - production
      Build_Type:
        type: choice
        description: Select the type of build
        options:
          - Feature
          - Release
      Branch:
        description: "Enter the feature branch name. For release build deployments this input is ignored"
        required: true
        default: main
      Build_Run_Number:
        description: "Enter the build run number"
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  validate:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      IMAGE_ID: ${{env.IMAGE_ID}}
      IMAGE_TAG: ${{env.IMAGE_TAG}}
      TARGET_NAMESPACE: ${{env.TARGET_NAMESPACE}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step to set environment variables from user inputs
      - name: Set environment variables
        id: set-env
        run: |
          echo "ENVIRONMENT=${{github.event.inputs.Environment}}"  | tee -a $GITHUB_ENV
          echo "BUILD_TYPE=${{github.event.inputs.Build_Type}}"  | tee -a $GITHUB_ENV

      # Find the namespace and image digest from input parameters
      - name: Determine if replication required
        id: get-replication
        uses: actions/github-script@v5
        with:
          script: |
            if (`${{github.event.inputs.Environment}}` == 'production' ) {
              return "true"
            }
            return "false"

      # Find the namespace and image digest from input parameters
      - name: Compute target namespace
        id: get-namespace
        uses: actions/github-script@v5
        with:
          script: |
            if(`${{env.BUILD_TYPE}}` == 'Feature'){
              if (`${{env.ENVIRONMENT}}` == 'dev') {
                return "c8d6f2-dev"
              }
              if (`${{env.ENVIRONMENT}}` == 'test' ) {
                return "c8d6f2-test"
              }
               core.setFailed(`❌ Feature build can only be deployed in dev or test environments`  );
            }
            if(`${{env.BUILD_TYPE}}` == 'Release'){
              if (`${{env.ENVIRONMENT}}` == 'dev') {
                return "c8d6f2-dev"
              }
              if (`${{env.ENVIRONMENT}}` == 'test' || `${{env.ENVIRONMENT}}` == 'sandbox') {
                return "c8d6f2-test"
              }
              if (`${{env.ENVIRONMENT}}` == 'production') {
                return "c8d6f2-prod"
              }
            }
            core.setFailed(`❌ Invalid inputs for Environment and branch`  );

      - name: Compute image prefix
        id: get-image-prefix
        uses: actions/github-script@v5
        with:
          script: |
            if (`${{env.BUILD_TYPE}}` == 'Release') {
              return "${{env.RELEASE_BUILD_IMAGE_TAG_PREFIX}}-main"
            }
            if (`${{env.BUILD_TYPE}}` == 'Feature') {
              return "${{env.FEATURE_BUILD_IMAGE_TAG_PREFIX}}-${{github.event.inputs.Branch}}"
            }

      - name: Compute image tag and replication
        run: |
          echo "TARGET_NAMESPACE=${{steps.get-namespace.outputs.result}}"  | tee -a $GITHUB_ENV
          echo "IMAGE_TAG=${{steps.get-image-prefix.outputs.result}}-${{github.event.inputs.Build_Run_Number}}"  | tee -a $GITHUB_ENV
          echo "REPLICATE=${{steps.get-replication.outputs.result}}"  | tee -a $GITHUB_ENV

      # Login to OpenShift
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{env.OPENSHIFT_SERVER_GOLD}}
          openshift_token: ${{env.OPENSHIFT_GOLD_TOKEN}}
          insecure_skip_tls_verify: true
          namespace: ${{env.DEFAULT_NAMESPACE}}

      - name: Find image
        id: get-image-id
        run: |
          echo "IMAGE_ID=$(oc get istag/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}} -o jsonpath={.image.metadata.name})" | tee -a $GITHUB_ENV

      # Validate if that is correct. If not, exit the job
      - name: Validate image
        uses: actions/github-script@v4
        with:
          script: |
            if (`${{env.IMAGE_ID}}`.length == 0) {
              core.setFailed(`❌ Image tag: ${{env.IMAGE_TAG}} does not exist for image: ${{env.IMAGE_NAME}}. \n` +
                "Please provide a valid image information." );
            }
            else {
              core.info(`✅ Valid image found.`);
            }

  prepare:
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
          # Login to Gold OpenShift
      - name: Log in to Gold OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{env.OPENSHIFT_SERVER_GOLD}}
          openshift_token: ${{env.OPENSHIFT_GOLD_TOKEN}}
          insecure_skip_tls_verify: true
          namespace: ${{env.DEFAULT_NAMESPACE}}

      # Push the image to selected repository
      - name: Push Image
        run: |
          oc tag ${{env.IMAGE_NAME}}:${{needs.validate.outputs.IMAGE_TAG}} ${{needs.validate.outputs.TARGET_NAMESPACE}}/${{env.IMAGE_NAME}}:${{needs.validate.outputs.IMAGE_TAG}}

      # Login to GoldDR  OpenShift
      - name: Log in to Gold DR OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{env.OPENSHIFT_SERVER_GOLDDR}}
          openshift_token: ${{env.OPENSHIFT_GOLDDR_TOKEN}}
          insecure_skip_tls_verify: true
          namespace: ${{env.DEFAULT_NAMESPACE}}

      # Push the image to selected repository
      - name: Push Image
        run: |
          oc tag ${{env.IMAGE_NAME}}:${{needs.validate.outputs.IMAGE_TAG}} ${{needs.validate.outputs.TARGET_NAMESPACE}}/${{env.IMAGE_NAME}}:${{needs.validate.outputs.IMAGE_TAG}}

  deploy-feature-build:
    if: github.event.inputs.Build_Type == 'Feature'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [validate , prepare]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # 5. Edit the selcted Argo CD manifest file
      # Update the image ID in the manifest repository used by Argo CD.
      # We need to use the SSH deploy key to check out the manifest repo, set up
      # Kustomize in the runner, update the image ID, commit the change, and
      # push the changes back to the manifest repository.
      # ------------------------------------------------------------------------
      - name: Prepare deploy key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{secrets.GITOPS_C8D6F2_PRIVATE_KEY}}

      - name: Check out manifest repo
        uses: actions/checkout@v3
        with:
          ssh-key: ${{secrets.GITOPS_C8D6F2_PRIVATE_KEY}}
          repository: bcgov-c/tenant-gitops-c8d6f2
          ref: 8045-move-rtrans-prod-to-gold-cluster

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Determine Kustomize folder location
        id: get-kustomize-folder
        uses: actions/github-script@v5
        with:
          script: |
            if (`${{github.event.inputs.ENVIRONMENT}}` == 'dev') {
              return "dev"
            }
            if (`${{github.event.inputs.ENVIRONMENT}}` == 'test') {
              return "test"
            }
            core.setFailed(`❌ Invalid inputs for Environment and branch`  );

      - name: Update image ID for gold
        if: ${{success()}}
        run: |
          cd rtrans-devops/overlay/${{steps.get-kustomize-folder.outputs.result}}
          kustomize edit set image "rtrans-image=${{env.IMAGE_REGISTRY_GOLD}}/${{needs.validate.outputs.TARGET_NAMESPACE}}/${{env.IMAGE_NAME}}@${{needs.validate.outputs.IMAGE_ID}}"
          
      - name: Update image ID for golddr if required
        if: ${{success() && env.REPLICATE == 'true'}}
        run: |
          cd rtrans-devops/overlay/${{steps.get-kustomize-folder.outputs.result}}-dr
          kustomize edit set image "rtrans-image=${{env.IMAGE_REGISTRY_GOLDDR}}/${{needs.validate.outputs.TARGET_NAMESPACE}}/${{env.IMAGE_NAME}}@${{needs.validate.outputs.IMAGE_ID}}"

      - name: Commit changes
        if: ${{success()}}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Deploying feature build: ${{needs.validate.outputs.IMAGE_TAG}} in ${{github.event.inputs.ENVIRONMENT}} using deploy workflow."
          git push origin

  deploy-release-build:
    if: github.event.inputs.Build_Type == 'Release'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: ReviewRequired
    needs: [validate , prepare]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # 5. Edit the selcted Argo CD manifest file
      # Update the image ID in the manifest repository used by Argo CD.
      # We need to use the SSH deploy key to check out the manifest repo, set up
      # Kustomize in the runner, update the image ID, commit the change, and
      # push the changes back to the manifest repository.
      # ------------------------------------------------------------------------
      - name: Prepare deploy key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{secrets.GITOPS_C8D6F2_PRIVATE_KEY}}

      - name: Check out manifest repo
        uses: actions/checkout@v3
        with:
          ssh-key: ${{secrets.GITOPS_C8D6F2_PRIVATE_KEY}}
          repository: bcgov-c/tenant-gitops-c8d6f2
          ref: 8045-move-rtrans-prod-to-gold-cluster

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Determine Kustomize folder location
        id: get-kustomize-folder
        uses: actions/github-script@v5
        with:
          script: |
            if (`${{github.event.inputs.ENVIRONMENT}}` == 'dev') {
              return "dev"
            }
            if (`${{github.event.inputs.ENVIRONMENT}}` == 'test') {
              return "test"
            }
            if (`${{github.event.inputs.ENVIRONMENT}}` == 'sandbox') {
              return "sbx"
            }
            if (`${{github.event.inputs.ENVIRONMENT}}` == 'production') {
              return "prod"
            }

      - name: Update image ID and commit change
        if: ${{success()}}
        run: |
          cd rtrans-devops/overlay/${{steps.get-kustomize-folder.outputs.result}}
          kustomize edit set image "rtrans-image=${{env.IMAGE_REGISTRY_GOLD}}/${{needs.validate.outputs.TARGET_NAMESPACE}}/${{env.IMAGE_NAME}}@${{needs.validate.outputs.IMAGE_ID}}"
          
      - name: Update image ID for golddr if required
        if: ${{success() && env.REPLICATE == 'true'}}
        run: |
          cd ../${{steps.get-kustomize-folder.outputs.result}}-dr
          kustomize edit set image "rtrans-image=${{env.IMAGE_REGISTRY_GOLDDR}}/${{needs.validate.outputs.TARGET_NAMESPACE}}/${{env.IMAGE_NAME}}@${{needs.validate.outputs.IMAGE_ID}}"

      - name: Commit changes
        if: ${{success()}}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Deploying release build: ${{needs.validate.outputs.IMAGE_TAG}} in ${{needs.validate.outputs.ENVIRONMENT}} using deploy workflow."
          git push origin
